{"remainingRequest":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\UserList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\UserList.vue","mtime":1619334282617},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport '../../plugins/bootstrap-table'\r\nimport { getUserList,userUpdate } from '@api/user'\r\nimport UpdateUserAvatarModal from '@views/list/modules/UpdateUserAvatarModal'\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  components: {\r\n    UpdateUserAvatarModal\r\n  },\r\n  data () {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          }\r\n        },\r\n        {\r\n          title: '用户名',\r\n          field: 'username',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"username\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '昵称',\r\n          field: 'nickname',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"nickname\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '角色',\r\n          field: 'role',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"role\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '头像',\r\n          field: 'avatar',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"user-avatar\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .user-avatar': function (e, value, row, index) {\r\n              that.handleUserAvatarEdit(row)\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '签名',\r\n          field: 'description',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '邮箱',\r\n          field: 'email',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '手机号',\r\n          field: 'phone',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n                '&nbsp;&nbsp;' +\r\n                '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        // onDblClickCell: that.dblClickCell // 单元格双击事件\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    edit (user) {\r\n      Object.assign(this.user, user) // 深度拷贝\r\n      this.visible = true\r\n      // 每次编辑需要先清空下之前的数据\r\n      this.username = user.username\r\n      this.nickname = user.nickname\r\n      this.description = user.description\r\n      this.avatar = user.avatar\r\n      this.id = user.id\r\n      this.role = user.role\r\n      const that = this\r\n    },\r\n    handleEdit (record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub (record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleUserAvatarEdit (record) {\r\n      console.log('开始更新封面啦')\r\n      console.log(record)\r\n      this.$refs.updateUserAvatarModal.edit(record)\r\n    },\r\n    handleOk () {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    loadAll () {\r\n      const that = this\r\n      getUserList()\r\n          .then(res => {\r\n            if (res.code === 0) {\r\n              that.tableData = res.data\r\n              that.$refs.table._initTable()\r\n            } else {\r\n              that.$notification.error({\r\n                message: '获取全部用户的列表失败',\r\n                description: res.msg\r\n              })\r\n            }\r\n          })\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["UserList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmfile":"UserList.vue","sourceRoot":"src/views/list","sourcesContent":["<template>\r\n  <a-card :bordered=\"false\">\r\n    <div id=\"toolbar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"$refs.createQuestionModal.create()\">新建</a-button>&nbsp;\r\n      <a-button type=\"primary\" icon=\"reload\" @click=\"loadAll()\">刷新</a-button>\r\n    </div>\r\n    <BootstrapTable\r\n        ref=\"table\"\r\n        :columns=\"columns\"\r\n        :data=\"tableData\"\r\n        :options=\"options\"\r\n    />\r\n    <!-- ref是为了方便用this.$refs.modal直接引用，下同 -->\r\n    <update-user-avatar-modal ref=\"updateUserAvatarModal\" @ok=\"handleOk\" />\r\n    < ref=\"questionUpdateModal\" @ok=\"handleOk\" />\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\nimport '../../plugins/bootstrap-table'\r\nimport { getUserList,userUpdate } from '@api/user'\r\nimport UpdateUserAvatarModal from '@views/list/modules/UpdateUserAvatarModal'\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  components: {\r\n    UpdateUserAvatarModal\r\n  },\r\n  data () {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          }\r\n        },\r\n        {\r\n          title: '用户名',\r\n          field: 'username',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"username\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '昵称',\r\n          field: 'nickname',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"nickname\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '角色',\r\n          field: 'role',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"role\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '头像',\r\n          field: 'avatar',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"user-avatar\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .user-avatar': function (e, value, row, index) {\r\n              that.handleUserAvatarEdit(row)\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '签名',\r\n          field: 'description',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '邮箱',\r\n          field: 'email',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '手机号',\r\n          field: 'phone',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n                '&nbsp;&nbsp;' +\r\n                '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        // onDblClickCell: that.dblClickCell // 单元格双击事件\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    edit (user) {\r\n      Object.assign(this.user, user) // 深度拷贝\r\n      this.visible = true\r\n      // 每次编辑需要先清空下之前的数据\r\n      this.username = user.username\r\n      this.nickname = user.nickname\r\n      this.description = user.description\r\n      this.avatar = user.avatar\r\n      this.id = user.id\r\n      this.role = user.role\r\n      const that = this\r\n    },\r\n    handleEdit (record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub (record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleUserAvatarEdit (record) {\r\n      console.log('开始更新封面啦')\r\n      console.log(record)\r\n      this.$refs.updateUserAvatarModal.edit(record)\r\n    },\r\n    handleOk () {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    loadAll () {\r\n      const that = this\r\n      getUserList()\r\n          .then(res => {\r\n            if (res.code === 0) {\r\n              that.tableData = res.data\r\n              that.$refs.table._initTable()\r\n            } else {\r\n              that.$notification.error({\r\n                message: '获取全部用户的列表失败',\r\n                description: res.msg\r\n              })\r\n            }\r\n          })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"]}]}