{"remainingRequest":"C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Desktop\\exam-portal\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Desktop\\exam-portal\\src\\views\\list\\ExamDetail.vue","mtime":1617959933265},{"path":"C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Desktop\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["import _JSON$stringify from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _Object$create from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _Map from \"C:\\\\Users\\\\elk\\\\Desktop\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam } from '../../api/exam';\nimport UserMenu from '../../components/tools/UserMenu';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.answersMap = new _Map();\n    var that = this; // 从后端获取考试的详细信息，渲染到考试详情里\n\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        that.examDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n  },\n  methods: _objectSpread({}, mapGetters(['nickname', 'avatar']), {\n    getQuestionDetail: function getQuestionDetail(questionId) {\n      var _this2 = this;\n\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this; // 清空问题绑定的值\n\n      this.radioValue = '';\n      this.checkValues = [];\n\n      _getQuestionDetail(questionId).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              _Object$assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value); // 更新做题者选择的答案\n\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = _Object$create(null);\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(strMap), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              k = _step$value[0],\n              v = _step$value[1];\n\n          obj[k] = v;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return obj;\n    },\n\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return _JSON$stringify(this._strMapToObj(map));\n    },\n\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this3 = this;\n\n      // Todo:向后端提交作答信息数组answersMap\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          // 考试交卷，后端判分完成，然后跳转到我的考试界面\n          _this3.$notification.success({\n            message: '考卷提交成功！'\n          });\n\n          _this3.$router.push('/list/exam-record-list');\n\n          return res.data;\n        } else {\n          _this3.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    }\n  })\n};",{"version":3,"sources":["ExamDetail.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <a-layout>\r\n    <a-layout-header class=\"header\" style=\"color: #fff\">\r\n      <!--   v-if=\"examDetail.exam\" 是为了防止 异步请求时页面渲染的时候还没有拿到这个值而报错， 下面多处这个判断都是这个道理 -->\r\n      <span style=\"font-size:25px;margin-left: 0px;\" v-if=\"examDetail.exam\">\r\n        <a-avatar slot=\"avatar\" size=\"large\" shape=\"circle\" :src=\"examDetail.exam.examAvatar | imgSrcFilter\"/>\r\n        {{ examDetail.exam.examName }}\r\n        <span style=\"font-size:15px;\">{{ examDetail.exam.examDescription }} </span>\r\n      </span>\r\n      <span style=\"float: right;\">\r\n        <span style=\"margin-right: 60px; font-size: 20px\" v-if=\"examDetail.exam\">考试限时：{{ examDetail.exam.examTimeLimit }}分钟 这里是倒计时</span>\r\n        <a-button type=\"danger\" ghost style=\"margin-right: 60px;\" @click=\"finishExam()\">交卷</a-button>\r\n        <a-avatar class=\"avatar\" size=\"small\" :src=\"avatar()\"/>\r\n        <span style=\"margin-left: 12px\">{{ nickname() }}</span>\r\n      </span>\r\n    </a-layout-header>\r\n    <a-layout>\r\n      <a-layout-sider width=\"190\" :style=\"{background: '#444',overflow: 'auto', height: '100vh', position: 'fixed', left: 0 }\">\r\n        <a-menu\r\n          mode=\"inline\"\r\n          :defaultSelectedKeys=\"['1']\"\r\n          :defaultOpenKeys=\"['question_radio', 'question_check', 'question_judge']\"\r\n          :style=\"{ height: '100%', borderRight: 0 }\"\r\n        >\r\n          <a-sub-menu key=\"question_radio\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-circle\" theme=\"twoTone\"/>单选题(每题{{ examDetail.exam.examScoreRadio }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.radioIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_check\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-square\" theme=\"twoTone\"/>多选题(每题{{ examDetail.exam.examScoreCheck }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.checkIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_judge\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"like\" theme=\"twoTone\"/>判断题(每题{{ examDetail.exam.examScoreJudge }}分)</span>\r\n            <a-menu-item v-for=\"(item, index) in examDetail.judgeIds\" :key=\"item\" @click=\"getQuestionDetail(item)\">\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\"/>\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n        </a-menu>\r\n      </a-layout-sider>\r\n      <a-layout :style=\"{ marginLeft: '200px' }\">\r\n        <a-layout-content :style=\"{ margin: '24px 16px 0',height: '84vh', overflow: 'initial' }\">\r\n          <div :style=\"{ padding: '24px', background: '#fff',height: '84vh'}\">\r\n            <span v-show=\"currentQuestion === ''\" style=\"font-size: 30px;font-family: Consolas\">欢迎参加考试，请点击左侧题目编号开始答题</span>\r\n            <strong>{{ currentQuestion.type }} </strong> <p v-html=\"currentQuestion.name\"></p>\r\n            <!-- 单选题和判断题 --> <!-- key不重复只需要在一个for循环中保证即可 -->\r\n            <a-radio-group @change=\"onRadioChange\" v-model=\"radioValue\" v-if=\"currentQuestion.type === '单选题' || currentQuestion.type === '判断题'\">\r\n              <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-radio>\r\n            </a-radio-group>\r\n\r\n            <!-- 多选题 -->\r\n            <a-checkbox-group @change=\"onCheckChange\" v-model=\"checkValues\" v-if=\"currentQuestion.type === '多选题'\">\r\n              <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\r\n                {{ option.questionOptionContent }}\r\n              </a-checkbox>\r\n            </a-checkbox-group>\r\n          </div>\r\n        </a-layout-content>\r\n        <a-layout-footer :style=\"{ textAlign: 'center' }\">\r\n          Spting Boot Online Exam ©2020 Crated by Liang Shan Guang\r\n        </a-layout-footer>\r\n      </a-layout>\r\n    </a-layout>\r\n  </a-layout>\r\n</template>\r\n\r\n<script>\r\nimport { getExamDetail, getQuestionDetail, finishExam } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n\r\nexport default {\r\n  name: 'ExamDetail',\r\n  components: {\r\n    UserMenu\r\n  },\r\n  data () {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px'\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.answersMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里\r\n    getExamDetail(this.$route.params.id)\r\n      .then(res => {\r\n        if (res.code === 0) {\r\n          // 赋值考试对象\r\n          that.examDetail = res.data\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取考试详情失败',\r\n            description: res.msg\r\n          })\r\n        }\r\n      })\r\n  },\r\n  methods: {\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    getQuestionDetail (questionId) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.checkValues = []\r\n      getQuestionDetail(questionId)\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 赋值当前考试对象\r\n            that.currentQuestion = res.data\r\n            // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n            if (that.answersMap.get(that.currentQuestion.id)) {\r\n              // 说明之前做过这道题了\r\n              if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n                that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n              } else if (that.currentQuestion.type === '多选题') {\r\n                // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n                Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n              }\r\n            }\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '获取问题详情失败',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    },\r\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\r\n    onRadioChange (e) {\r\n      const userOptions = []\r\n      userOptions.push(e.target.value)\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, userOptions)\r\n    },\r\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\r\n    onCheckChange (checkedValues) {\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, checkedValues)\r\n    },\r\n    _strMapToObj (strMap) {\r\n      const obj = Object.create(null)\r\n      for (const [k, v] of strMap) {\r\n        obj[k] = v\r\n      }\r\n      return obj\r\n    },\r\n    /**\r\n     *map转换为json\r\n     */\r\n    _mapToJson (map) {\r\n      return JSON.stringify(this._strMapToObj(map))\r\n    },\r\n    /**\r\n     * 结束考试并交卷\r\n     */\r\n    finishExam () {\r\n      // Todo:向后端提交作答信息数组answersMap\r\n      finishExam(this.$route.params.id, this._mapToJson(this.answersMap))\r\n        .then(res => {\r\n          if (res.code === 0) {\r\n            // 考试交卷，后端判分完成，然后跳转到我的考试界面\r\n            this.$notification.success({\r\n              message: '考卷提交成功！'\r\n            })\r\n            this.$router.push('/list/exam-record-list')\r\n            return res.data\r\n          } else {\r\n            this.$notification.error({\r\n              message: '交卷失败！',\r\n              description: res.msg\r\n            })\r\n          }\r\n        })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/views/list"}]}