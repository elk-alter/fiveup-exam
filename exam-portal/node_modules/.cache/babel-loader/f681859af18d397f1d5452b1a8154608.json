{"remainingRequest":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\ExamRecordDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\ExamRecordDetail.vue","mtime":1619169839967},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1617960721201},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["import _Object$assign from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _Map from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, getExamRecordDetail } from '../../api/exam';\nimport UserMenu from '../../components/tools/UserMenu';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'ExamRecordDetail',\n  components: {\n    UserMenu: UserMenu\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 考试记录详情对象\n      recordDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 题目的正确答案\n      answersRightMap: {},\n      // 题目的作答结果(正确或错误)\n      resultsMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\n      radioRightValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\n      checkRightValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    };\n  },\n  computed: {\n    /**\r\n     * 当前题目用户是否作答正确\r\n     * */\n    questionRight: function questionRight() {\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True';\n    }\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.answersMap = new _Map();\n    this.answersRightMap = new _Map();\n    this.resultsMap = new _Map();\n    var that = this; // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\n\n    getExamDetail(this.$route.params.exam_id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        that.examDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    }); // 查看考试记录详情，渲染到前端界面\n\n    getExamRecordDetail(this.$route.params.record_id).then(function (res) {\n      if (res.code === 0) {\n        console.log(res.data); // 赋值考试对象\n\n        that.recordDetail = res.data; // 赋值用户的作答答案\n\n        that.objToMap();\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试记录详情失败',\n          description: res.msg\n        });\n      }\n    });\n  },\n  methods: _objectSpread({}, mapGetters(['nickname', 'avatar']), {\n    /**\r\n     * 把后端传过来的对象Object转换成Map\r\n     **/\n    objToMap: function objToMap() {\n      for (var item in this.recordDetail.answersMap) {\n        this.answersMap.set(item, this.recordDetail.answersMap[item]);\n      }\n\n      for (var _item in this.recordDetail.answersRightMap) {\n        this.answersRightMap.set(_item, this.recordDetail.answersRightMap[_item]);\n      }\n\n      for (var _item2 in this.recordDetail.resultsMap) {\n        this.resultsMap.set(_item2, this.recordDetail.resultsMap[_item2]);\n      }\n    },\n    getQuestionDetail: function getQuestionDetail(questionId) {\n      var _this2 = this;\n\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this; // 清空问题绑定的值\n\n      this.radioValue = '';\n      this.radioRightValue = '';\n      this.checkValues = [];\n      this.checkRightValues = [];\n\n      _getQuestionDetail(questionId).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n              that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              _Object$assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n\n              _Object$assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id));\n            }\n          }\n\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    }\n  })\n};",null]}