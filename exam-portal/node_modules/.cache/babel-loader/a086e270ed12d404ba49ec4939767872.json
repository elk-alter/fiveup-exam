{"remainingRequest":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\ExamDetail.vue","mtime":1617959933265},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1617960721201},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["import _JSON$stringify from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/json/stringify\";\nimport _slicedToArray from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/slicedToArray\";\nimport _getIterator from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/get-iterator\";\nimport _Object$create from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/create\";\nimport _Object$assign from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\nimport _objectSpread from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/objectSpread\";\nimport _Map from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/map\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam } from '../../api/exam';\nimport UserMenu from '../../components/tools/UserMenu';\nimport { mapGetters } from 'vuex';\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.answersMap = new _Map();\n    var that = this; // 从后端获取考试的详细信息，渲染到考试详情里\n\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        that.examDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n  },\n  methods: _objectSpread({}, mapGetters(['nickname', 'avatar']), {\n    getQuestionDetail: function getQuestionDetail(questionId) {\n      var _this2 = this;\n\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this; // 清空问题绑定的值\n\n      this.radioValue = '';\n      this.checkValues = [];\n\n      _getQuestionDetail(questionId).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              _Object$assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value); // 更新做题者选择的答案\n\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = _Object$create(null);\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(strMap), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              k = _step$value[0],\n              v = _step$value[1];\n\n          obj[k] = v;\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      return obj;\n    },\n\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return _JSON$stringify(this._strMapToObj(map));\n    },\n\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this3 = this;\n\n      // Todo:向后端提交作答信息数组answersMap\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          // 考试交卷，后端判分完成，然后跳转到我的考试界面\n          _this3.$notification.success({\n            message: '考卷提交成功！'\n          });\n\n          _this3.$router.push('/list/exam-record-list');\n\n          return res.data;\n        } else {\n          _this3.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    }\n  })\n};",null]}