{"remainingRequest":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\UserList.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\UserList.vue","mtime":1619334282617},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["import _Object$assign from \"C:\\\\Users\\\\elk\\\\Documents\\\\GitHub\\\\fiveup-exam\\\\exam-portal\\\\node_modules\\\\@babel\\\\runtime-corejs2/core-js/object/assign\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '../../plugins/bootstrap-table';\nimport { getUserList, userUpdate } from '@api/user';\nimport UpdateUserAvatarModal from '@views/list/modules/UpdateUserAvatarModal';\nexport default {\n  name: 'UserList',\n  components: {\n    UpdateUserAvatarModal: UpdateUserAvatarModal\n  },\n  data: function data() {\n    var that = this; // 方便在bootstrap-table中引用methods\n\n    return {\n      // 表头\n      columns: [{\n        title: '序号',\n        field: 'serial',\n        formatter: function formatter(value, row, index) {\n          return index + 1; // 这样的话每翻一页都会重新从1开始，\n        }\n      }, {\n        title: '用户名',\n        field: 'username',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"username\" style=\"height: 100%;width: 100%\">' + value + '</div>';\n        }\n      }, {\n        title: '昵称',\n        field: 'nickname',\n        width: 200,\n        formatter: function formatter(value, row) {\n          return '<div class=\"nickname\">' + value + '</div>';\n        }\n      }, {\n        title: '角色',\n        field: 'role',\n        formatter: function formatter(value, row) {\n          return '<div class=\"role\">' + value + '</div>';\n        }\n      }, {\n        title: '头像',\n        field: 'avatar',\n        formatter: function formatter(value, row) {\n          return '<div class=\"user-avatar\">' + value + '</div>';\n        },\n        events: {\n          'click .user-avatar': function clickUserAvatar(e, value, row, index) {\n            that.handleUserAvatarEdit(row);\n          }\n        }\n      }, {\n        title: '签名',\n        field: 'description',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-level\">' + value + '</div>';\n        }\n      }, {\n        title: '邮箱',\n        field: 'email',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-type\">' + value + '</div>';\n        }\n      }, {\n        title: '手机号',\n        field: 'phone',\n        formatter: function formatter(value, row) {\n          return '<div class=\"question-category\">' + value + '</div>';\n        }\n      }, {\n        title: '操作',\n        field: 'action',\n        align: 'center',\n        formatter: function formatter(value, row) {\n          return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' + '&nbsp;&nbsp;' + '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>';\n        },\n        events: {\n          'click .view-question': function clickViewQuestion(e, value, row, index) {\n            that.handleSub(row);\n          },\n          'click .edit-question': function clickEditQuestion(e, value, row, index) {\n            that.handleEdit(row);\n          }\n        }\n      }],\n      tableData: [],\n      // bootstrap-table的数据\n      // custom bootstrap-table\n      options: {\n        search: true,\n        showColumns: true,\n        showExport: true,\n        pagination: true,\n        toolbar: '#toolbar',\n        // 下面两行是支持高级搜索，即按照字段搜索\n        advancedSearch: true,\n        idTable: 'advancedTable' // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\n        // onClickRow: that.clickRow,\n        // onClickCell: that.clickCell // 单元格单击事件\n        // onDblClickCell: that.dblClickCell // 单元格双击事件\n\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.loadAll(); // 加载所有问题的数据\n  },\n  methods: {\n    edit: function edit(user) {\n      _Object$assign(this.user, user); // 深度拷贝\n\n\n      this.visible = true; // 每次编辑需要先清空下之前的数据\n\n      this.username = user.username;\n      this.nickname = user.nickname;\n      this.description = user.description;\n      this.avatar = user.avatar;\n      this.id = user.id;\n      this.role = user.role;\n      var that = this;\n    },\n    handleEdit: function handleEdit(record) {\n      this.$refs.modalEdit.edit(record);\n    },\n    handleSub: function handleSub(record) {\n      // 查看题目\n      console.log(record);\n      this.$refs.modalView.edit(record);\n    },\n    handleUserAvatarEdit: function handleUserAvatarEdit(record) {\n      console.log('开始更新封面啦');\n      console.log(record);\n      this.$refs.updateUserAvatarModal.edit(record);\n    },\n    handleOk: function handleOk() {\n      this.loadAll(); // 加载所有问题的数据\n    },\n    loadAll: function loadAll() {\n      var that = this;\n      getUserList().then(function (res) {\n        if (res.code === 0) {\n          that.tableData = res.data;\n\n          that.$refs.table._initTable();\n        } else {\n          that.$notification.error({\n            message: '获取全部用户的列表失败',\n            description: res.msg\n          });\n        }\n      });\n    }\n  }\n};",{"version":3,"sources":["UserList.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <a-card :bordered=\"false\">\r\n    <div id=\"toolbar\">\r\n      <a-button type=\"primary\" icon=\"plus\" @click=\"$refs.createQuestionModal.create()\">新建</a-button>&nbsp;\r\n      <a-button type=\"primary\" icon=\"reload\" @click=\"loadAll()\">刷新</a-button>\r\n    </div>\r\n    <BootstrapTable\r\n        ref=\"table\"\r\n        :columns=\"columns\"\r\n        :data=\"tableData\"\r\n        :options=\"options\"\r\n    />\r\n    <!-- ref是为了方便用this.$refs.modal直接引用，下同 -->\r\n    <update-user-avatar-modal ref=\"updateUserAvatarModal\" @ok=\"handleOk\" />\r\n    < ref=\"questionUpdateModal\" @ok=\"handleOk\" />\r\n  </a-card>\r\n</template>\r\n\r\n<script>\r\nimport '../../plugins/bootstrap-table'\r\nimport { getUserList,userUpdate } from '@api/user'\r\nimport UpdateUserAvatarModal from '@views/list/modules/UpdateUserAvatarModal'\r\n\r\nexport default {\r\n  name: 'UserList',\r\n  components: {\r\n    UpdateUserAvatarModal\r\n  },\r\n  data () {\r\n    const that = this // 方便在bootstrap-table中引用methods\r\n    return {\r\n      // 表头\r\n      columns: [\r\n        {\r\n          title: '序号',\r\n          field: 'serial',\r\n          formatter: function (value, row, index) {\r\n            return index + 1 // 这样的话每翻一页都会重新从1开始，\r\n          }\r\n        },\r\n        {\r\n          title: '用户名',\r\n          field: 'username',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"username\" style=\"height: 100%;width: 100%\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '昵称',\r\n          field: 'nickname',\r\n          width: 200,\r\n          formatter: (value, row) => {\r\n            return '<div class=\"nickname\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '角色',\r\n          field: 'role',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"role\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '头像',\r\n          field: 'avatar',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"user-avatar\">' + value + '</div>'\r\n          },\r\n          events: {\r\n            'click .user-avatar': function (e, value, row, index) {\r\n              that.handleUserAvatarEdit(row)\r\n            }\r\n          }\r\n        },\r\n        {\r\n          title: '签名',\r\n          field: 'description',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-level\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '邮箱',\r\n          field: 'email',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-type\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '手机号',\r\n          field: 'phone',\r\n          formatter: (value, row) => {\r\n            return '<div class=\"question-category\">' + value + '</div>'\r\n          }\r\n        },\r\n        {\r\n          title: '操作',\r\n          field: 'action',\r\n          align: 'center',\r\n          formatter: (value, row) => {\r\n            return '<button type=\"button\" class=\"btn btn-success view-question\">详情</button>' +\r\n                '&nbsp;&nbsp;' +\r\n                '<button type=\"button\" class=\"btn btn-success edit-question\">编辑</button>'\r\n          },\r\n          events: {\r\n            'click .view-question': function (e, value, row, index) {\r\n              that.handleSub(row)\r\n            },\r\n            'click .edit-question': function (e, value, row, index) {\r\n              that.handleEdit(row)\r\n            }\r\n          }\r\n        }\r\n      ],\r\n      tableData: [], // bootstrap-table的数据\r\n      // custom bootstrap-table\r\n      options: {\r\n        search: true,\r\n        showColumns: true,\r\n        showExport: true,\r\n        pagination: true,\r\n        toolbar: '#toolbar',\r\n        // 下面两行是支持高级搜索，即按照字段搜索\r\n        advancedSearch: true,\r\n        idTable: 'advancedTable',\r\n        // 下面是常用的事件，更多的点击事件可以参考：http://www.itxst.com/bootstrap-table-events/tutorial.html\r\n        // onClickRow: that.clickRow,\r\n        // onClickCell: that.clickCell // 单元格单击事件\r\n        // onDblClickCell: that.dblClickCell // 单元格双击事件\r\n      }\r\n    }\r\n  },\r\n  mounted () {\r\n    this.loadAll() // 加载所有问题的数据\r\n  },\r\n  methods: {\r\n    edit (user) {\r\n      Object.assign(this.user, user) // 深度拷贝\r\n      this.visible = true\r\n      // 每次编辑需要先清空下之前的数据\r\n      this.username = user.username\r\n      this.nickname = user.nickname\r\n      this.description = user.description\r\n      this.avatar = user.avatar\r\n      this.id = user.id\r\n      this.role = user.role\r\n      const that = this\r\n    },\r\n    handleEdit (record) {\r\n      this.$refs.modalEdit.edit(record)\r\n    },\r\n    handleSub (record) {\r\n      // 查看题目\r\n      console.log(record)\r\n      this.$refs.modalView.edit(record)\r\n    },\r\n    handleUserAvatarEdit (record) {\r\n      console.log('开始更新封面啦')\r\n      console.log(record)\r\n      this.$refs.updateUserAvatarModal.edit(record)\r\n    },\r\n    handleOk () {\r\n      this.loadAll() // 加载所有问题的数据\r\n    },\r\n    loadAll () {\r\n      const that = this\r\n      getUserList()\r\n          .then(res => {\r\n            if (res.code === 0) {\r\n              that.tableData = res.data\r\n              that.$refs.table._initTable()\r\n            } else {\r\n              that.$notification.error({\r\n                message: '获取全部用户的列表失败',\r\n                description: res.msg\r\n              })\r\n            }\r\n          })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n\r\n</style>\r\n"],"sourceRoot":"src/views/list"}]}