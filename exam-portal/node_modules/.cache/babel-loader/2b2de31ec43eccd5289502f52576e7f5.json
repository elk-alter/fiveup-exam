{"remainingRequest":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\modules\\StepByStepExamModal.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\src\\views\\list\\modules\\StepByStepExamModal.vue","mtime":1619175233016},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1617960721201},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\babel-loader\\lib\\index.js","mtime":1617960693405},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1617960720798},{"path":"C:\\Users\\elk\\Documents\\GitHub\\fiveup-exam\\exam-portal\\node_modules\\vue-loader\\lib\\index.js","mtime":1617960721218}],"contextDependencies":[],"result":["import \"core-js/modules/es6.function.name\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport '../../../plugins/summernote';\nimport $ from 'jquery';\nimport { getExamQuestionTypeList, examCreate, examUpdate } from '../../../api/exam';\nvar stepForms = [['name', 'elapse', 'desc'], ['radioScore', 'checkScore', 'judgeScore'], ['option']];\nexport default {\n  name: 'StepByStepExamModal',\n  data: function data() {\n    return {\n      labelCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 7\n        }\n      },\n      size: 'default',\n      wrapperCol: {\n        xs: {\n          span: 24\n        },\n        sm: {\n          span: 13\n        }\n      },\n      visible: false,\n      confirmLoading: false,\n      currentStep: 0,\n      mdl: {},\n      form: this.$form.createForm(this),\n      // 单选题对象列表\n      radios: [],\n      // 多选题对象列表\n      checks: [],\n      // 判断题对象列表\n      judges: []\n    };\n  },\n  updated: function updated() {\n    this.initSummernote();\n  },\n  methods: {\n    initSummernote: function initSummernote() {\n      console.log('初始化富文本插件');\n      $('#summernote-exam-avatar-create').summernote({\n        lang: 'zh-CN',\n        placeholder: '粘贴截图到这即可，图片最好不要大于80*80',\n        height: 200,\n        width: 320,\n        htmlMode: true,\n        toolbar: [],\n        fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n        fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana']\n      });\n    },\n    create: function create() {\n      var _this = this;\n\n      this.visible = true; // 从后端数据获取单选题、多选题和判断题的列表\n\n      getExamQuestionTypeList().then(function (res) {\n        console.log(res);\n\n        if (res.code === 0) {\n          console.log(res.data);\n          _this.radios = res.data.radios;\n          _this.checks = res.data.checks;\n          _this.judges = res.data.judges;\n        } else {\n          _this.$notification.error({\n            message: '获取问题列表失败',\n            description: res.msg\n          });\n        }\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        _this.$notification.error({\n          message: '获取问题列表失败',\n          description: err.message\n        });\n      });\n    },\n    popupScroll: function popupScroll() {\n      console.log('popupScroll');\n    },\n    handleNext: function handleNext(step) {\n      var _this2 = this;\n\n      // 处理下一步或者完成事件\n      var validateFields = this.form.validateFields;\n      var currentStep = step + 1;\n\n      if (currentStep <= 2) {\n        // stepForms\n        validateFields(stepForms[this.currentStep], function (errors, values) {\n          if (!errors) {\n            _this2.currentStep = currentStep;\n          }\n        });\n        return;\n      } // // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\n      // this.confirmLoading = true\n      // validateFields((errors, values) => { // values就是表单中校验的值，后面提交到后端接口时主要就是用这个values\n      //   values.avatar = $('#summernote-exam-avatar-create').summernote('code')\n      //   // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\n      //   values.radios = this.radios\n      //   values.checks = this.checks\n      //   values.judges = this.judges\n      //   console.log('提交数据到后端')\n      //   this.confirmLoading = false\n      //   if (!errors) {\n      //     // 在这里把创建的考试的内容(存放在values中)提交给后端接口，需要的参数都已经封装成values这个json啦\n      //     console.log('values:', values)\n      //     // 把data中的question属性提交到后端，待写完后端接口.把前端的创建的题型提交到后端\n      //     examCreate(values).then(res => {\n      //       // 成功就跳转到结果页面\n      //       console.log(res)\n      //       if (res.code === 0) {\n      //         this.$notification.success({\n      //           message: '创建成功',\n      //           description: '考试创建成功'\n      //         })\n      //         // 关闭弹出框\n      //         this.visible = false\n      //         this.$emit('ok')\n      //       }\n      //     }).catch(err => {\n      //       // 失败就弹出警告消息\n      //       this.$notification.error({\n      //         message: '考试创建失败',\n      //         description: err.message\n      //       })\n      //     })\n      //   } else {\n      //     this.confirmLoading = false\n      //   }\n      // })\n      // last step，最后一步，代表完成考试编写，需要点击\"完成\"创建考试\n\n\n      this.confirmLoading = true;\n      console.log('提交数据到后端');\n      this.confirmLoading = false;\n      this.exam.name = this.name;\n      this.exam.elapse = this.elapse;\n      this.exam.desc = this.desc;\n      this.exam.avatar = this.avatar;\n      this.exam.radioScore = this.radioScore;\n      this.exam.checkScore = this.checkScore;\n      this.exam.judgeScore = this.judgeScore; // 设置单选题、多选题和判断题的内容，但是提交前需要保证都已经被正确更新了\n\n      this.exam.radios = this.radios;\n      this.exam.checks = this.checks;\n      this.exam.judges = this.judges;\n      console.log('radios:' + this.exam.radios);\n      console.log('checks:' + this.exam.checks);\n      console.log('judges:' + this.exam.judges);\n      var that = this;\n      examUpdate(that.exam).then(function (res) {\n        // 成功就跳转到结果页面\n        console.log(res);\n\n        if (res.code === 0) {\n          that.$notification.success({\n            message: '更新成功',\n            description: '考试更新成功'\n          }); // 关闭弹出框\n\n          that.visible = false;\n          that.currentStep = 0;\n          that.$emit('ok');\n        }\n      }).catch(function (err) {\n        // 失败就弹出警告消息\n        that.$notification.error({\n          message: '考试更新失败',\n          description: err.message\n        });\n      });\n    },\n    backward: function backward() {\n      this.currentStep--;\n    },\n    handleCancel: function handleCancel() {\n      // clear form & currentStep\n      this.visible = false;\n      this.currentStep = 0;\n    },\n    // 改变选择的题目列表,这里需要分单选、多选和判断进行单独更新，下面的代码要针对radios、checks和judges分别适配\n    handleRadioChange: function handleRadioChange(values) {\n      console.log(values); // 更新单选题的信息\n\n      for (var i = 0; i < this.radios.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.radios[i].name; // 当前问题是否被问题创建者选中\n\n        var checked = false;\n\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.radios[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        } // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n\n\n        if (checked === false) {\n          this.radios[i].checked = false;\n        }\n      }\n    },\n    // 更新多选题信息\n    handleCheckChange: function handleCheckChange(values) {\n      console.log(values); // 更新单选题的信息\n\n      for (var i = 0; i < this.checks.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.checks[i].name; // 当前问题是否被问题创建者选中\n\n        var checked = false;\n\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.checks[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        } // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n\n\n        if (checked === false) {\n          this.checks[i].checked = false;\n        }\n      }\n    },\n    // 更新判断题信息\n    handleJudgeChange: function handleJudgeChange(values) {\n      console.log(values); // 更新单选题的信息\n\n      for (var i = 0; i < this.judges.length; i++) {\n        // 遍历所有的题目的选项\n        // 取出一个选项的id\n        var name = this.judges[i].name; // 当前问题是否被问题创建者选中\n\n        var checked = false;\n\n        for (var j = 0; j < values.length; j++) {\n          // 拿着\n          var value = values[j];\n\n          if (name === value) {\n            // 说明这个问题被考试创建者选中\n            checked = true;\n            this.judges[i].checked = true;\n            break; // 跳出内部的for循环\n          }\n        } // 这个选项遍历到最后，发现还不是答案(不在答案数组中)，那么就把这个选项的answer属性设置为false\n\n\n        if (checked === false) {\n          this.judges[i].checked = false;\n        }\n      }\n    }\n  }\n};",null]}